data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
group0 = as(bramblecanes[bramblecanes$marks == "0"], "SpatialPoints")
proj4string(group0) <- CRS('+init=epsg:26978')
#not sure why error occur
group0_dens = smooth_map( group0)
tm_shape( group0_dens$raster ) +
tm_raster()
trees=read.csv("homework/trees.csv")
ppp=ppp(trees$x,trees$y,xrange=c(0,200),yrange=c(0,200))
sp=as.SpatialPoints.ppp(ppp)
sp=as.SpatialPoints.ppp(ppp)
#plot will not change no matter how contours change
contours = seq( 0 , 50000 , by=10000 )
sp_dens = smooth_map( sp ,breaks=contours , style="fixed", bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
#plot will not change no matter how contours change
contours = seq( 0 , 50000 , by=5000 )
sp_dens = smooth_map( sp ,breaks=contours , style="fixed", bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
seq( 0 , 50000 , by=5000 )
sp_dens = smooth_map( sp ,
breaks= seq( 0 , 50000 , by=5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( sp ,
breaks= seq( 0 , 50000 , by=20000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
sp
trees=read.csv("homework/trees.csv")
trees_ppp = ppp(trees$x,trees$y,xrange=c(0,200),yrange=c(0,200))
trees_sp = as.SpatialPoints.ppp(trees_ppp)
proj4string(group0) <- CRS('+init=epsg:26978')
proj4string(trees_sp) <- CRS('+init=epsg:26978')
#plot will not change no matter how contours change
contours = seq( 0 , 50000 , by=5000 )
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by=20000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by=5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf, fMultivar)
trees = read.csv("homework/trees.csv")
trees_ppp = ppp(trees$x,trees$y,xrange=c(0,200),yrange=c(0,200))
trees_sp = as.SpatialPoints.ppp(trees_ppp)
proj4string(trees_sp) <- CRS('+init=epsg:26978')
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by=5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens
tm_shape( sp_dens$polygons ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by=5000 ) ,
style="fixed")
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.1,0.1))
tm_shape( sp_dens$polygons ) +
tm_raster()
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.05,0..5))
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.05,0.05))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.02,0.02))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.02,0.02)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.015,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.02,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
tmap_arrange( dn , df )
library( GISTools )
library( tmap )
library( tmaptools )
data( newhaven )
tmap_mode("view")
tm_shape( blocks ) +
tm_borders() +
tm_shape( breach ) +
tm_dots( col="navyblue" )
blocks_sf = st_as_sf( blocks )
areas = st_area( blocks_sf )    ## Note area units are in ft^2
## so distance units are in ft
choose_bw = function( spdf )
{
X = coordinates( spdf )
sigma = c( sd(X[,1]) , sd(X[,2]) ) * ( 2 / 3*nrow(X))^(1/6)
convfactor = 1.60934/5280   ## convert from ft to km
convfactor = 1/1000
return( sigma*convfactor )
}
## Experiment with different bandwidths
## my_bw = choose_bw(breach)
my_bw = 1.5 * c(1,1)
breach_dens = smooth_map( breach , cover=blocks ,
bandwidth = my_bw )
tm_shape( breach_dens$raster ) +
tm_raster()
tmap_mode( "view" )
tm_shape( blocks ) +
tm_borders( alpha=0.5 )
tm_shape( breach_dens$iso ) +
tm_lines( col="tomato4" , lwd=2 ) +
tm_shape( blocks ) +
tm_borders( col="gray50" , lwd=0.6 )
## Section 6.4 Further Uses of KDE
##
tmap_mode( "plot" )
contours = seq( 0 , 4.0 , by=0.4 )
# Create the maps and store them in variables
windows( 12 , 7 )
my_bw = 1.5
brn_dens = smooth_map( burgres.n , cover=blocks ,
breaks=contours , style="fixed" ,
bandwidth=my_bw )
dn = tm_shape( blocks ) +
tm_borders() +
tm_shape( brn_dens$polygons ) +
tm_fill( col='level' , alpha=0.8 ) +   ## Mistake in book
tm_layout( title="Nonforced Burglaries")
brf_dens = smooth_map( burgres.f , cover=blocks ,
breaks=contours , style="fixed" ,
bandwidth=my_bw )
df = tm_shape( blocks ) +
tm_borders() +
tm_shape( brf_dens$polygons ) +
tm_fill( col='level' , alpha=0.8 ) +   ## Mistake in book
tm_layout( title="Forced Burglaries")
tmap_arrange( dn , df )
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
proj4string(bramblecanes) = CRS('+init=epsg:26978')
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf, fMultivar)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
proj4string(bramblecanes) = CRS('+init=epsg:26978')
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf, fMultivar)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
group0 = as(bramblecanes[bramblecanes$marks == "0"], "SpatialPoints")
proj4string(group0) = CRS('+init=epsg:26978')
#not sure why error occur
group0_dens = smooth_map( group0)
tm_shape( group0_dens$raster ) +
tm_raster()
?smooth_map
#not sure why error occur
group0_dens = smooth_map( group0, bandwidth = 0.1)
#not sure why error occur
group0_dens = smooth_map( group0, bandwidth = 0.01)
#not sure why error occur
group0_dens = smooth_map( group0, bandwidth = 0.001)
#not sure why error occur
group0_dens = smooth_map( group0, bandwidth = 0.1)
#not sure why error occur
group0_dens = smooth_map( group0, bandwidth = 1)
#not sure why error occur
group0_dens = smooth_map( group0, bandwidth = 10)
p_kde = function(group_num = "0"){
group0 = as(bramblecanes[bramblecanes$marks == group_num], "SpatialPoints")
proj4string(group0) = CRS('+init=epsg:26978')
group0_dens = smooth_map(group0)
p = tm_shape(group0_dens$raster) +
tm_raster() +
tm_layout(title = paste0("Mark: ", group_num))
return(p)
}
table(bramblecanes$marks)
tmap_arrange( p_kde("0") , p_kde("1"), p_kde("2"))
spdf = blocks
coordinates(spdf)
hbins = fMultivar::hexBinning( coordinates(spdf) )
plot( hbins$x , hbins$y , asp=1 )
hexbin_map = function( spdf , ... )
{
hbins = fMultivar::hexBinning( coordinates(spdf) , ... )
u = c( 1 , 0 , -1 , -1 , 0 , 1 )
v = c( 1 , 2 , 1 , -1 , -2 , -1 )
u = u * min( diff( unique( sort( hbins$x))))
v = v * min( diff( unique( sort( hbins$y))))/3
hexes_list = vector( length(hbins$x) , mode="list" )
for ( i in 1:length(hbins$x) )
{
pol= Polygon( cbind( u + hbins$x[i] , v + hbins$y[i] ) ,
hole=FALSE )
hexes_list[[i]] = Polygons( list( pol) , i )
}
## Note error in book for next line (correcet on web site)
hex_cover_sp <- SpatialPolygons( hexes_list,
proj4string=CRS(proj4string(spdf)))
hex_cover = SpatialPolygonsDataFrame( hex_cover_sp ,
data.frame( z=hbins$z , match.ID=FALSE ) )
return( hex_cover )
}
tmap_mode( "view" )
breach_hex = hexbin_map( breach , bins=20 )
plot( breach_hex )
tm_shape( breach_hex ) +
tm_fill( col="z" , title="Count" , alpha=0.7 )
blocks
library( sp )
library( spatstat )
library( maptools )    ## contains  as.SpatialPoints.ppp
library( tmaptools )
library( MASS )
## library( kerdiest )
data( bramblecanes )
str( bramblecanes )
x = bramblecanes$x
y = bramblecanes$y
bramblecanes.kde = kde2d( x , y , 0.3 )
filled.contour( bramblecanes.kde , xlim=c(0,1) , ylim=c(0,1) , asp=1 )
class(bramblecanes.kde)
?filled.contour
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf, fMultivar)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
group0 = as(bramblecanes[bramblecanes$marks == "0"], "SpatialPoints")
proj4string(group0) <- CRS('+init=epsg:26978')
#not sure why error occur
group0_dens = smooth_map( group0)
tm_shape( group0_dens$raster ) +
tm_raster()
tm_shape( group0_dens$raster )
tm_shape( group0_dens$raster ) +
tm_raster()
trees = read.csv("homework/trees.csv")
trees_ppp = ppp(trees$x,trees$y,xrange=c(0,200),yrange=c(0,200))
trees_sp = as.SpatialPoints.ppp(trees_ppp)
proj4string(trees_sp) <- CRS('+init=epsg:26978')
#plot will not change no matter how contours change
contours = seq( 0 , 50000 , by=5000 )
sp_dens = smooth_map( sp ,breaks=contours , style="fixed", bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
trees = read.csv("homework/trees.csv")
trees_ppp = ppp(trees$x,trees$y,xrange=c(0,200),yrange=c(0,200))
trees_sp = as.SpatialPoints.ppp(trees_ppp)
proj4string(trees_sp) <- CRS('+init=epsg:26978')
#plot will not change no matter how contours change
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.02,0.015)) # you also need to adjust the bandwidth
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf, fMultivar)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
group0 = as(bramblecanes[bramblecanes$marks == "0"], "SpatialPoints")
proj4string(group0) <- CRS('+init=epsg:26978')
#not sure why error occur
group0_dens = smooth_map( group0)
tm_shape( group0_dens$raster ) +
tm_raster()
trees = read.csv("homework/trees.csv")
trees_ppp = ppp(trees$x,trees$y,xrange=c(0,200),yrange=c(0,200))
trees_sp = as.SpatialPoints.ppp(trees_ppp)
proj4string(trees_sp) <- CRS('+init=epsg:26978')
#plot will not change no matter how contours change
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.02,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 10000 ) ,
style="fixed",
bandwidth = c(0.02,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 10000 ) ,
style="fixed",
bandwidth = c(0.02,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf, fMultivar)
trees = read.csv("homework/trees.csv")
trees_ppp = ppp(trees$x,trees$y,xrange=c(0,200),yrange=c(0,200))
trees_sp = as.SpatialPoints.ppp(trees_ppp)
proj4string(trees_sp) <- CRS('+init=epsg:26978')
#plot will not change no matter how contours change
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 10000 ) ,
style="fixed",
bandwidth = c(0.02,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 10000 ) ,
style="fixed",
bandwidth = c(0.03,0.03)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 10000 ) ,
style="fixed",
bandwidth = c(0.015,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
# a) Kernel density estimate
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
p_kde = function(group_num = "0"){
group0 = as(bramblecanes[bramblecanes$marks == group_num], "SpatialPoints")
proj4string(group0) = CRS('+init=epsg:26978')
group0_dens = smooth_map(group0)
p = tm_shape(group0_dens$raster) +
tm_raster() +
tm_layout(title = paste0("Mark: ", group_num))
return(p)
}
tmap_arrange( p_kde("0") , p_kde("1"), p_kde("2"))
83/2922
36/5766
install.packages("ggmosaic")
install.packages("fMultivar")
trees = read.csv("homework/trees.csv")
trees_ppp = ppp(trees$x,trees$y,xrange=c(0,200),yrange=c(0,200))
trees_sp = as.SpatialPoints.ppp(trees_ppp)
proj4string(trees_sp) <- CRS('+init=epsg:26978')
#plot will not change no matter how contours change
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
# a) Kernel density estimate
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
p_kde = function(group_num = "0"){
group0 = as(bramblecanes[bramblecanes$marks == group_num], "SpatialPoints")
proj4string(group0) = CRS('+init=epsg:26978')
group0_dens = smooth_map(group0, bandwidth = c(0.01,0.01))
p = tm_shape(group0_dens$raster) +
tm_raster() +
tm_layout(title = paste0("Mark: ", group_num))
return(p)
}
tmap_arrange( p_kde("0") , p_kde("1"), p_kde("2"))
# a) Kernel density estimate
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
p_kde = function(group_num = "0"){
group0 = as(bramblecanes[bramblecanes$marks == group_num], "SpatialPoints")
proj4string(group0) = CRS('+init=epsg:26978')
group0_dens = smooth_map(group0, bandwidth = c(0.02,0.02))
p = tm_shape(group0_dens$raster) +
tm_raster() +
tm_layout(title = paste0("Mark: ", group_num))
return(p)
}
tmap_arrange( p_kde("0") , p_kde("1"), p_kde("2"))
# a) Kernel density estimate
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
p_kde = function(group_num = "0"){
group0 = as(bramblecanes[bramblecanes$marks == group_num], "SpatialPoints")
proj4string(group0) = CRS('+init=epsg:26978')
group0_dens = smooth_map(group0, bandwidth = c(0.03,0.03))
p = tm_shape(group0_dens$raster) +
tm_raster() +
tm_layout(title = paste0("Mark: ", group_num))
return(p)
}
tmap_arrange( p_kde("0") , p_kde("1"), p_kde("2"))
# a) Kernel density estimate
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
p_kde = function(group_num = "0"){
group0 = as(bramblecanes[bramblecanes$marks == group_num], "SpatialPoints")
proj4string(group0) = CRS('+init=epsg:26978')
group0_dens = smooth_map(group0, bandwidth = c(0.3,0.3))
p = tm_shape(group0_dens$raster) +
tm_raster() +
tm_layout(title = paste0("Mark: ", group_num))
return(p)
}
tmap_arrange( p_kde("0") , p_kde("1"), p_kde("2"))
# a) Kernel density estimate
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
p_kde = function(group_num = "0"){
group0 = as(bramblecanes[bramblecanes$marks == group_num], "SpatialPoints")
proj4string(group0) = CRS('+init=epsg:26978')
group0_dens = smooth_map(group0, bandwidth = c(3, 3))
p = tm_shape(group0_dens$raster) +
tm_raster() +
tm_layout(title = paste0("Mark: ", group_num))
return(p)
}
tmap_arrange( p_kde("0") , p_kde("1"), p_kde("2"))
data( bramblecanes )
str(bramblecanes)
bramb_env = envelope(bramblecanes, Kest, correction = "border")
plot(bramb_env)
trees = data.table::fread("homework/trees.csv")
trees = data.table::fread("homework/trees.csv")
trees_ppp = trees[,ppp(x, y, xrange = c(0, 200), yrange = c(0, 200))]
trees_sp = as.SpatialPoints.ppp(trees_ppp)
proj4string(trees_sp) <- CRS('+init=epsg:26978')
#plot will not change no matter how contours change
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
class(trees_ppp)
trees
# b) tree diameters
pacman::p_load(ggplot2)
trees %>%
ggplot(aes(x = dia)) +
geom_histogram(aes(y = ..density..),
color = "#1F3552",
fill = "#4271AE",
size = 0.7) +
geom_density(size = 1)
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 10000 ) ,
style="fixed",
bandwidth = c(0.015,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
class(bramblecanes)
# e) Estimate the K function and plot it along with the envelope for testing CSR.
trees_env = envelope(trees_ppp, Kest, correction = "border")
plot(trees_env)
trees_ppp = trees[dia <= 20, ppp(x, y, xrange = c(0, 200), yrange = c(0, 200))]
# f) Consider only the trees with diameter less than or equal to 20. Repeat part (e)
trees = data.table::fread("homework/trees.csv")
trees_ppp20 = trees[dia <= 20, ppp(x, y, xrange = c(0, 200), yrange = c(0, 200))]
trees_env20 = envelope(trees_ppp20, Kest, correction = "border")
plot(trees_env20)
