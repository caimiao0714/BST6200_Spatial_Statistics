nc.sids.lw = nb2listw( nc.sids.nb )
nc.sids = readOGR(system.file("shapes/sids.shp", package="spData")[1])
proj4string(nc.sids) = CRS("+proj=longlat +ellps=clrk66")
row.names(nc.sids) = as.character(nc.sids$FIPS)
nc.data = nc.sids@data %>%
dplyr::select(NAME, FIPSNO, BIR74, SID74, NWBIR74,
BIR79, SID79, NWBIR79, x, y, lon, lat) %>%
arrange(NAME)  %>%
mutate(SIDrate74 = SID74/BIR74,
SIDrate79 = SID79/BIR79)
nc.sids@data = nc.data
nc.sids.nb = poly2nb( nc.sids )
nc.sids.net = nb2lines( nc.sids.nb , coords=coordinates(nc.sids) )
tm_shape( nc.sids ) +
tm_borders( col="darkgray" ) +
tm_shape( nc.sids.net ) +
tm_lines( col="darkgreen" , lwd=2 )
nc.sids.lw = nb2listw( nc.sids.nb )
num = rep(0,k)
for (i in 1:k) num[i] = length( nc.sids.lw$neighbours[[i]] )
adj = c()
for (i in 1:k) adj = c(adj,nc.sids.lw$neighbours[[i]] )
L = length(adj)
code = nimbleCode({
mu ~ dflat()
tau ~ dgamma( 1 , 0.001 )
for (i in 1:L)
weights[i]  <-  1
s[1:k] ~ dcar_normal(adj[1:L],weights[1:L],num[1:k],tau,zero_mean=1)
for (i in 1:k) {
log(theta[i])  <-  mu + s[i]
y[i] ~ dpois( BIR79[i]*theta[i] )
}
})
constants = list( k=100 , L=490 , num=num , adj=adj , BIR79=nc.sids$BIR79 )
data = list( y=nc.sids$SID79 )
inits = list( mu=0 , tau=1 , s=rep(0,k) )
nc.sids.model = nimbleModel( code=code ,
constants=constants ,
data=data ,
inits=inits )
compile.nc.sids.model = compileNimble( nc.sids.model )
nc.sids.model.Conf = configureMCMC( nc.sids.model , print = TRUE )
nc.sids.model.Conf$addMonitors(c("mu","tau","theta"))
nc.sids.model.MCMC = buildMCMC( nc.sids.model.Conf )
compile.nc.sids.MCMC = compileNimble( nc.sids.model.MCMC )
niter = 8000
nburn =  2000
set.seed(1)
start.time = proc.time()
samples = runMCMC( compile.nc.sids.MCMC, niter = niter, nburnin = nburn,
inits = inits, nchains = 1, samplesAsCodaMCMC = TRUE )
stop.time = proc.time()
time.elapsed = stop.time - start.time
print( time.elapsed )
nc.sids
MN_nb = spdep::poly2nb(MN, queen = T)
pacman::p_load(tigris, sp, spdep, rgeos, sf, tmap,
tidyverse, data.table, nimble)
MN = counties("Minnesota", cb = TRUE)
adult_smoke = fread("data/Minnesota_adult_smoking.csv") %>%
select(FIPS, smoking_rate = `% Smokers`)
pancreas = fread("data/Minnesota_Pancreas_cancer.csv") %>%
select(FIPS = fips, year, N_pancreas = count,
population, pancreas_rate = rate) %>%
mutate(pancreas_rate = gsub(" \\(UR\\)", "", pancreas_rate) %>%
as.numeric())
MN_sf = st_as_sf(MN) %>%
mutate(FIPS = as.integer(paste0(STATEFP, COUNTYFP))) %>%
select(NAME, FIPS) %>%
arrange(NAME) %>%
left_join(pancreas, by = 'FIPS') %>%
left_join(adult_smoke, by = 'FIPS')
head(MN_sf)
MN_nb = spdep::poly2nb(MN, queen = T)
MN_net = spdep::nb2lines(MN_nb , coords = coordinates(MN))
MN_lw = spdep::nb2listw( nc.sids.nb )
MN_lw
View(MN_lw)
MN_net
plot(MN_nb, coordinates(MN))
plot(MN_nb, coordinates(MN), add = TRUE)
plot(MN_nb, coordinates(MN), add = TRUE)
plot(MN)
plot(MN_nb, coordinates(MN), add = TRUE)
tm_shape(nc.sids) +
tm_polygons(col = "SIDrate79", border.col = "black") +
tm_text("NAME", "lon", "lat", size = 0.8, col = "black") +
tm_layout("SIDS Raw Rates", title.size = 2)
plot(MN)
plot(MN)
plot(MN_nb, coordinates(MN), add = TRUE)
plot(MN_nb, coordinates(MN), add = TRUE, pch = 16, color = 'red')
plot(MN)
plot(MN_nb, coordinates(MN), add = TRUE, pch = 16, col = 'red')
num = rep(0, k)
pacman::p_load(tigris, sp, spdep, rgeos, sf, tmap,
tidyverse, data.table, nimble)
MN = counties("Minnesota", cb = TRUE)
adult_smoke = fread("data/Minnesota_adult_smoking.csv") %>%
select(FIPS, smoking_rate = `% Smokers`)
pancreas = fread("data/Minnesota_Pancreas_cancer.csv") %>%
select(FIPS = fips, year, N_pancreas = count,
population, pancreas_rate = rate) %>%
mutate(pancreas_rate = gsub(" \\(UR\\)", "", pancreas_rate) %>%
as.numeric())
MN_sf = st_as_sf(MN) %>%
mutate(FIPS = as.integer(paste0(STATEFP, COUNTYFP))) %>%
select(NAME, FIPS) %>%
arrange(NAME) %>%
left_join(pancreas, by = 'FIPS') %>%
left_join(adult_smoke, by = 'FIPS')
head(MN_sf)
MN_nb = spdep::poly2nb(MN, queen = T)
MN_net = spdep::nb2lines(MN_nb , coords = coordinates(MN))
MN_lw = spdep::nb2listw( nc.sids.nb )
num = rep(0, nrow(MN_sf))
for (i in 1:k) num[i] = length( nc.sids.lw$neighbours[[i]] )
k = nrow(MN_sf)
num = rep(0, k)
for (i in 1:k) num[i] = length( nc.sids.lw$neighbours[[i]] )
adj = c()
for (i in 1:k) adj = c(adj,nc.sids.lw$neighbours[[i]] )
for (i in 1:k) num[i] = length( MN_lw$neighbours[[i]] )
MN_nb = spdep::poly2nb(MN, queen = T)
MN_net = spdep::nb2lines(MN_nb , coords = coordinates(MN))
MN_lw = spdep::nb2listw( nc.sids.nb )
for (i in 1:k) num[i] = length( MN_lw$neighbours[[i]] )
MN_lw = spdep::nb2listw( MN_nb )
plot(MN_nb, coordinates(MN))
plot(MN_nb, coordinates(MN), add = TRUE)
plot(MN)
plot(MN_nb, coordinates(MN), add = TRUE)
plot(MN_nb, coordinates(MN), add = TRUE, pch = 16, col = 'red')
MN_lw$neighbours
class(MN_lw$neighbours)
plot(MN)
plot(MN_nb, coordinates(MN), add = TRUE, points = FALSE, pch = 16, col = 'red')
k = nrow(MN_sf)
num = rep(0, k)
for (i in 1:k) num[i] = length( MN_lw$neighbours[[i]] )
adj = c()
for (i in 1:k) adj = c(adj, MN_lw$neighbours[[i]] )
L = length(adj)
pacman::p_load(tigris, sp, spdep, rgeos, sf, tmap,
tidyverse, data.table, nimble)
MN = counties("Minnesota", cb = TRUE)
adult_smoke = fread("data/Minnesota_adult_smoking.csv") %>%
select(FIPS, smoking_rate = `% Smokers`)
pancreas = fread("data/Minnesota_Pancreas_cancer.csv") %>%
select(FIPS = fips, year, N_pancreas = count,
population, pancreas_rate = rate) %>%
mutate(pancreas_rate = gsub(" \\(UR\\)", "", pancreas_rate) %>%
as.numeric())
MN_sf = st_as_sf(MN) %>%
mutate(FIPS = as.integer(paste0(STATEFP, COUNTYFP))) %>%
select(NAME, FIPS) %>%
left_join(pancreas, by = 'FIPS') %>%
left_join(adult_smoke, by = 'FIPS')
head(MN_sf)
MN_nb = spdep::poly2nb(MN, queen = T)
MN_sp = as(MN_sf, 'Spatial')
MN_weight = spdep::nb2listw(MN_nb, style = 'W', zero.policy = TRUE)
spdep::moran.test(MN_sp$pancreas_rate, MN_weight)
spdep::moran.test(MN_sp$smoking_rate, MN_weight)
MN_nb = spdep::poly2nb(MN, queen = T)
MN_net = spdep::nb2lines(MN_nb , coords = coordinates(MN))
MN_lw = spdep::nb2listw( MN_nb )
plot(MN)
plot(MN_nb, coordinates(MN), add = TRUE, points = FALSE, pch = 16, col = 'red')
k = nrow(MN_sf)
num = rep(0, k)
for (i in 1:k) num[i] = length( MN_lw$neighbours[[i]] )
adj = c()
for (i in 1:k) adj = c(adj, MN_lw$neighbours[[i]] )
L = length(adj)
code = nimbleCode({
mu ~ dflat()
tau ~ dgamma( 1 , 0.001 )
beta ~ dnormal(0, 0.001)
for (i in 1:L)
weights[i]  <-  1
s[1:k] ~ dcar_normal(adj[1:L], weights[1:L], num[1:k], tau, zero_mean = 1)
for (i in 1:k) {
log(theta[i])  <-  mu + beta*x[i] + s[i]
y[i] ~ dpois( BIR79[i]*theta[i] )
}
})
nc.sids = readOGR(system.file("shapes/sids.shp", package="spData")[1])
proj4string(nc.sids) = CRS("+proj=longlat +ellps=clrk66")
row.names(nc.sids) = as.character(nc.sids$FIPS)
pacman::p_load(maps, sp, spdep, spatial, maptools, classInt, RColorBrewer,
rgdal, GISTools, dplyr, tmap, methods, nimble)
nc.sids = readOGR(system.file("shapes/sids.shp", package="spData")[1])
proj4string(nc.sids) = CRS("+proj=longlat +ellps=clrk66")
row.names(nc.sids) = as.character(nc.sids$FIPS)
class(nc.sids)
class(MN)
class(MN_nb)
MN = counties("Minnesota", cb = TRUE)
adult_smoke = fread("data/Minnesota_adult_smoking.csv") %>%
select(FIPS, smoking_rate = `% Smokers`)
pancreas = fread("data/Minnesota_Pancreas_cancer.csv") %>%
select(FIPS = fips, year, N_pancreas = count,
population, pancreas_rate = rate) %>%
mutate(pancreas_rate = gsub(" \\(UR\\)", "", pancreas_rate) %>%
as.numeric())
adult_smoke = fread("data/Minnesota_adult_smoking.csv") %>%
dplyr::select(FIPS, smoking_rate = `% Smokers`)
pancreas = fread("data/Minnesota_Pancreas_cancer.csv") %>%
dplyr::select(FIPS = fips, year, N_pancreas = count,
population, pancreas_rate = rate) %>%
mutate(pancreas_rate = gsub(" \\(UR\\)", "", pancreas_rate) %>%
as.numeric())
MN_data = MN@data %>%
mutate(FIPS = as.integer(paste0(STATEFP, COUNTYFP))) %>%
select(NAME, FIPS) %>%
left_join(pancreas, by = 'FIPS') %>%
left_join(adult_smoke, by = 'FIPS')
MN_data = MN@data %>%
mutate(FIPS = as.integer(paste0(STATEFP, COUNTYFP))) %>%
dplyr::select(NAME, FIPS) %>%
left_join(pancreas, by = 'FIPS') %>%
left_join(adult_smoke, by = 'FIPS')
MN@data = MN_data
tm_shape(MN) +
tm_fill(title = "Pancreas cancer\nrates",
col = "pancreas_rate",
n = 6, style = "jenks",
palette = "Reds") +
tm_borders(col = "black") +
tm_layout(main.title = "Pancreas cancer rates in Minnesota",
main.title.size = 1.2, frame = FALSE) +
tm_legend(legend.position = c(0.67, 0.2))
map_pancreas = tm_shape(MN) +
tm_fill(title = "Pancreas cancer\nrates",
col = "pancreas_rate",
n = 6, style = "jenks",
palette = "Reds") +
tm_borders(col = "black") +
tm_layout(main.title = "Pancreas cancer rates in Minnesota",
main.title.size = 1.2, frame = FALSE) +
tm_legend(legend.position = c(0.67, 0.2))
map_smoking = tm_shape(MN_sf) +
tm_fill(title = "Adult smoking\nrates",
col = "smoking_rate",
n = 6, style = "jenks",
palette = "Reds") +
tm_borders(col = "black") +
tm_layout(main.title = "Adult smoking rates in Minnesota",
main.title.size = 1.2, frame = FALSE) +
tm_legend(legend.position = c(0.67, 0.2))
tmap_arrange(map_pancreas, map_smoking, ncol = 2)
MN_nb = spdep::poly2nb(MN, queen = T)
MN_sp = as(MN_sf, 'Spatial')
MN_weight = spdep::nb2listw(MN_nb, style = 'W', zero.policy = TRUE)
spdep::moran.test(MN_sp$pancreas_rate, MN_weight)
spdep::moran.test(MN_sp$smoking_rate, MN_weight)
MN_nb = spdep::poly2nb(MN, queen = T)
MN_net = spdep::nb2lines(MN_nb , coords = coordinates(MN))
MN_lw = spdep::nb2listw( MN_nb )
plot(MN)
plot(MN_nb, coordinates(MN), add = TRUE, points = FALSE, pch = 16, col = 'red')
k = nrow(MN_sf)
num = rep(0, k)
for (i in 1:k) num[i] = length( MN_lw$neighbours[[i]] )
adj = c()
for (i in 1:k) adj = c(adj, MN_lw$neighbours[[i]] )
L = length(adj)
code = nimbleCode({
mu ~ dflat()
tau ~ dgamma( 1 , 0.001 )
beta ~ dnormal(0, 0.001)
for (i in 1:L)
weights[i]  <-  1
s[1:k] ~ dcar_normal(adj[1:L], weights[1:L], num[1:k], tau, zero_mean = 1)
for (i in 1:k) {
log(theta[i])  <-  mu + beta*x[i] + s[i]
y[i] ~ dpois( population[i]*theta[i] )
}
})
constants = list(
k = k,
L = L,
num = num,
adj = adj,
population = MN$population
)
data = list(y = MN$N_pancreas, x = MN$smoking_rate)
inits = list(mu = 0, tau = 1, s = rep(0, k))
MN_model = nimbleModel(
code = code ,
constants = constants ,
data = data ,
inits = inits
)
code = nimbleCode({
mu ~ dflat()
tau ~ dgamma( 1 , 0.001 )
beta ~ dnorm(0, sd = 10)
for (i in 1:L)
weights[i]  <-  1
s[1:k] ~ dcar_normal(adj[1:L], weights[1:L], num[1:k], tau, zero_mean = 1)
for (i in 1:k) {
log(theta[i])  <-  mu + beta*x[i] + s[i]
y[i] ~ dpois( population[i]*theta[i] )
}
})
constants = list(
k = k,
L = L,
num = num,
adj = adj,
population = MN$population
)
data = list(y = MN$N_pancreas, x = MN$smoking_rate)
inits = list(mu = 0, tau = 1, s = rep(0, k))
MN_model = nimbleModel(
code = code ,
constants = constants ,
data = data ,
inits = inits
)
compiled_MN_model = compileNimble( MN_model )
MN_Conf = configureMCMC( MN_model , print = TRUE )
MN_Conf$addMonitors(c("mu","tau","theta", "beta"))
MN_Conf_MCMC = buildMCMC( MN_Conf )
MN_complie_MCMC = compileNimble( MN_Conf_MCMC )
MCMC_samples = runMCMC( compile.nc.sids.MCMC, niter = 10^4, nburnin = 4000,
inits = inits, nchains = 1, samplesAsCodaMCMC = TRUE )
MCMC_samples = runMCMC(MN_complie_MCMC, niter = 10^4, nburnin = 4000,
inits = inits, nchains = 1, samplesAsCodaMCMC = TRUE)
ts.plot(samples1[ , 'mu'], xlab = 'iteration', col="red" , lwd=1.5 ,
ylab = expression(mu), main = expression(mu))
ts.plot(MCMC_samples[ , 'mu'], xlab = 'iteration', col="red" , lwd=1.5 ,
ylab = expression(mu), main = expression(mu))
ts.plot(MCMC_samples[ , 'tau'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(tau), main = expression(tau))
ts.plot(MCMC_samples[ , 'theta[1]'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(theta[1]), main = expression(theta[1]))
ts.plot(MCMC_samples[ , 'theta[2]'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(theta[2]), main = expression(theta[2]))
ts.plot(MCMC_samples[ , 'beta'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(beta), main = expression(beta))
MCMC_samples = runMCMC(MN_complie_MCMC, niter = 20000, nburnin = 10000,
inits = inits, nchains = 1, samplesAsCodaMCMC = TRUE)
ts.plot(MCMC_samples[ , 'mu'], xlab = 'iteration', col="red" , lwd=1.5 ,
ylab = expression(mu), main = expression(mu))
ts.plot(MCMC_samples[ , 'beta'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(beta), main = expression(beta))
ts.plot(MCMC_samples[ , 'tau'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(tau), main = expression(tau))
MN$smoking_rate
MN$N_pancreas
MN$population
code = nimbleCode({
mu ~ dnorm(0, sd = 5)
tau ~ dgamma( 1 , 0.001 )
beta ~ dnorm(0, sd = 5)
for (i in 1:L)
weights[i]  <-  1
s[1:k] ~ dcar_normal(adj[1:L], weights[1:L], num[1:k], tau, zero_mean = 1)
for (i in 1:k) {
log(theta[i])  <-  mu + beta*x[i] + s[i]
y[i] ~ dpois( population[i]*theta[i] )
}
})
constants = list(
k = k,
L = L,
num = num,
adj = adj,
population = MN$population
)
data = list(y = MN$N_pancreas, x = MN$smoking_rate)
inits = list(mu = 0, tau = 1, s = rep(0, k))
MN_model = nimbleModel(
code = code ,
constants = constants ,
data = data ,
inits = inits
)
data = list(y = MN$N_pancreas, x = MN$smoking_rate)
inits = list(mu = 0, tau = 1, s = rep(0, k), beta = 0)
MN_model = nimbleModel(
code = code ,
constants = constants ,
data = data ,
inits = inits
)
compiled_MN_model = compileNimble( MN_model )
MN_Conf = configureMCMC( MN_model , print = TRUE )
MN_Conf$addMonitors(c("mu","tau","theta", "beta"))
MN_Conf_MCMC = buildMCMC( MN_Conf )
MN_complie_MCMC = compileNimble( MN_Conf_MCMC )
set.seed(1)
MCMC_samples = runMCMC(MN_complie_MCMC, niter = 20000, nburnin = 10000,
inits = inits, nchains = 1, samplesAsCodaMCMC = TRUE)
ts.plot(MCMC_samples[ , 'mu'], xlab = 'iteration', col="red" , lwd=1.5 ,
ylab = expression(mu), main = expression(mu))
ts.plot(MCMC_samples[ , 'tau'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(tau), main = expression(tau))
ts.plot(MCMC_samples[ , 'theta[1]'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(theta[1]), main = expression(theta[1]))
ts.plot(MCMC_samples[ , 'theta[2]'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(theta[2]), main = expression(theta[2]))
ts.plot(MCMC_samples[ , 'beta'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(beta), main = expression(beta))
MCMC_samples = runMCMC(MN_complie_MCMC, niter = 40000, nburnin = 2000,
inits = inits, nchains = 1, samplesAsCodaMCMC = TRUE)
ts.plot(MCMC_samples[ , 'mu'], xlab = 'iteration', col="red" , lwd=1.5 ,
ylab = expression(mu), main = expression(mu))
ts.plot(MCMC_samples[ , 'beta'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(beta), main = expression(beta))
MCMC_samples = runMCMC(MN_complie_MCMC, niter = 40000, nburnin = 20000,
inits = inits, nchains = 1, samplesAsCodaMCMC = TRUE)
ts.plot(MCMC_samples[ , 'mu'], xlab = 'iteration', col="red" , lwd=1.5 ,
ylab = expression(mu), main = expression(mu))
ts.plot(MCMC_samples[ , 'beta'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(beta), main = expression(beta))
adj
L
k
k = nrow(MN@data)
num = rep(0, k)
for (i in 1:k) num[i] = length( MN_lw$neighbours[[i]] )
adj = c()
for (i in 1:k) adj = c(adj, MN_lw$neighbours[[i]] )
L = length(adj)
code = nimbleCode({
mu ~ dnorm(0, sd = 5)
tau ~ dgamma(1 , 0.001)
tau1 ~ dgamma(1 , 0.001)
beta ~ dnorm(0, sd = 5)
for (i in 1:L)
weights[i]  <-  1
s[1:k] ~ dcar_normal(adj[1:L], weights[1:L], num[1:k], tau, zero_mean = 1)
for (i in 1:k) {
log(theta[i])  <-  mu + beta * x[i] + s[i] + v[i]
y[i] ~ dpois(population[i] * theta[i])
v[i] ~ dnorm(0 , tau1)
}
})
constants = list(
k = k,
L = L,
num = num,
adj = adj,
population = MN$population
)
data = list(y = MN$N_pancreas, x = MN$smoking_rate)
inits = list(mu = 0, tau = 1, s = rep(0, k), beta = 0, tau1 = 1)
MN_model = nimbleModel(
code = code ,
constants = constants ,
data = data ,
inits = inits
)
compiled_MN_model = compileNimble( MN_model )
MN_Conf = configureMCMC( MN_model , print = TRUE )
MN_Conf$addMonitors(c("mu","tau","theta", "beta"))
MN_Conf_MCMC = buildMCMC( MN_Conf )
MN_complie_MCMC = compileNimble( MN_Conf_MCMC )
set.seed(1)
MCMC_samples = runMCMC(MN_complie_MCMC, niter = 40000, nburnin = 20000,
inits = inits, nchains = 1, samplesAsCodaMCMC = TRUE)
ts.plot(MCMC_samples[ , 'mu'], xlab = 'iteration', col="red" , lwd=1.5 ,
ylab = expression(mu), main = expression(mu))
ts.plot(MCMC_samples[ , 'beta'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(beta), main = expression(beta))
par(mfrow = c(3, 2))
ts.plot(MCMC_samples[ , 'mu'], xlab = 'iteration', col="red" , lwd=1.5 ,
ylab = expression(mu), main = expression(mu))
ts.plot(MCMC_samples[ , 'tau'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(tau), main = expression(tau))
ts.plot(MCMC_samples[ , 'tau1'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(tau[1]), main = expression(tau[1]))
ts.plot(MCMC_samples[ , 'theta[1]'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(theta[1]), main = expression(theta[1]))
ts.plot(MCMC_samples[ , 'theta[2]'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(theta[2]), main = expression(theta[2]))
ts.plot(MCMC_samples[ , 'beta'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(beta), main = expression(beta))
par(mfrow = c(3, 2), mai = c(.6, .5, .4, .1), mgp = c(1.8, 0.7, 0))
ts.plot(MCMC_samples[ , 'mu'], xlab = 'iteration', col="red" , lwd=1.5 ,
ylab = expression(mu), main = expression(mu))
ts.plot(MCMC_samples[ , 'tau'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(tau), main = expression(tau))
ts.plot(MCMC_samples[ , 'tau1'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(tau[1]), main = expression(tau[1]))
ts.plot(MCMC_samples[ , 'theta[1]'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(theta[1]), main = expression(theta[1]))
ts.plot(MCMC_samples[ , 'theta[2]'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(theta[2]), main = expression(theta[2]))
ts.plot(MCMC_samples[ , 'beta'], xlab = 'iteration', col="blue" , lwd=1.5 ,
ylab = expression(beta), main = expression(beta))
source('code/DBDA2E-utilities.R')
HDIofMCMC(MCMC_samples[ , 'beta'])
plotPost(MCMC_samples[ , 'beta'])
source('code/DBDA2E-utilities.R')
plotPost(MCMC_samples[ , 'mu'], main = expression(mu))
plotPost(MCMC_samples[ , 'tau'], main = expression(tau))
plotPost(MCMC_samples[ , 'tau1'], main = expression(tau[1]))
plotPost(MCMC_samples[ , 'beta'], main = expression(beta))
source('code/DBDA2E-utilities.R')
par(mfrow = c(2, 2), mai = c(.6, .5, .4, .1), mgp = c(1.8, 0.7, 0))
plotPost(MCMC_samples[ , 'mu'], main = expression(mu))
plotPost(MCMC_samples[ , 'tau'], main = expression(tau))
plotPost(MCMC_samples[ , 'tau1'], main = expression(tau[1]))
plotPost(MCMC_samples[ , 'beta'], main = expression(beta))
spdep::moran.test(MN$pancreas_rate, MN_weight)
spdep::moran.test(MN$smoking_rate, MN_weight)
