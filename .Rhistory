bandwidth = c(0.01,0.01))
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by=5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf, fMultivar)
trees = read.csv("homework/trees.csv")
trees_ppp = ppp(trees$x,trees$y,xrange=c(0,200),yrange=c(0,200))
trees_sp = as.SpatialPoints.ppp(trees_ppp)
proj4string(trees_sp) <- CRS('+init=epsg:26978')
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by=5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens
tm_shape( sp_dens$polygons ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by=5000 ) ,
style="fixed")
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.1,0.1))
tm_shape( sp_dens$polygons ) +
tm_raster()
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.05,0..5))
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.05,0.05))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.02,0.02))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.02,0.02)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.015,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.02,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
tmap_arrange( dn , df )
library( GISTools )
library( tmap )
library( tmaptools )
data( newhaven )
tmap_mode("view")
tm_shape( blocks ) +
tm_borders() +
tm_shape( breach ) +
tm_dots( col="navyblue" )
blocks_sf = st_as_sf( blocks )
areas = st_area( blocks_sf )    ## Note area units are in ft^2
## so distance units are in ft
choose_bw = function( spdf )
{
X = coordinates( spdf )
sigma = c( sd(X[,1]) , sd(X[,2]) ) * ( 2 / 3*nrow(X))^(1/6)
convfactor = 1.60934/5280   ## convert from ft to km
convfactor = 1/1000
return( sigma*convfactor )
}
## Experiment with different bandwidths
## my_bw = choose_bw(breach)
my_bw = 1.5 * c(1,1)
breach_dens = smooth_map( breach , cover=blocks ,
bandwidth = my_bw )
tm_shape( breach_dens$raster ) +
tm_raster()
tmap_mode( "view" )
tm_shape( blocks ) +
tm_borders( alpha=0.5 )
tm_shape( breach_dens$iso ) +
tm_lines( col="tomato4" , lwd=2 ) +
tm_shape( blocks ) +
tm_borders( col="gray50" , lwd=0.6 )
## Section 6.4 Further Uses of KDE
##
tmap_mode( "plot" )
contours = seq( 0 , 4.0 , by=0.4 )
# Create the maps and store them in variables
windows( 12 , 7 )
my_bw = 1.5
brn_dens = smooth_map( burgres.n , cover=blocks ,
breaks=contours , style="fixed" ,
bandwidth=my_bw )
dn = tm_shape( blocks ) +
tm_borders() +
tm_shape( brn_dens$polygons ) +
tm_fill( col='level' , alpha=0.8 ) +   ## Mistake in book
tm_layout( title="Nonforced Burglaries")
brf_dens = smooth_map( burgres.f , cover=blocks ,
breaks=contours , style="fixed" ,
bandwidth=my_bw )
df = tm_shape( blocks ) +
tm_borders() +
tm_shape( brf_dens$polygons ) +
tm_fill( col='level' , alpha=0.8 ) +   ## Mistake in book
tm_layout( title="Forced Burglaries")
tmap_arrange( dn , df )
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
proj4string(bramblecanes) = CRS('+init=epsg:26978')
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf, fMultivar)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
proj4string(bramblecanes) = CRS('+init=epsg:26978')
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf, fMultivar)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
group0 = as(bramblecanes[bramblecanes$marks == "0"], "SpatialPoints")
proj4string(group0) = CRS('+init=epsg:26978')
#not sure why error occur
group0_dens = smooth_map( group0)
tm_shape( group0_dens$raster ) +
tm_raster()
?smooth_map
#not sure why error occur
group0_dens = smooth_map( group0, bandwidth = 0.1)
#not sure why error occur
group0_dens = smooth_map( group0, bandwidth = 0.01)
#not sure why error occur
group0_dens = smooth_map( group0, bandwidth = 0.001)
#not sure why error occur
group0_dens = smooth_map( group0, bandwidth = 0.1)
#not sure why error occur
group0_dens = smooth_map( group0, bandwidth = 1)
#not sure why error occur
group0_dens = smooth_map( group0, bandwidth = 10)
p_kde = function(group_num = "0"){
group0 = as(bramblecanes[bramblecanes$marks == group_num], "SpatialPoints")
proj4string(group0) = CRS('+init=epsg:26978')
group0_dens = smooth_map(group0)
p = tm_shape(group0_dens$raster) +
tm_raster() +
tm_layout(title = paste0("Mark: ", group_num))
return(p)
}
table(bramblecanes$marks)
tmap_arrange( p_kde("0") , p_kde("1"), p_kde("2"))
spdf = blocks
coordinates(spdf)
hbins = fMultivar::hexBinning( coordinates(spdf) )
plot( hbins$x , hbins$y , asp=1 )
hexbin_map = function( spdf , ... )
{
hbins = fMultivar::hexBinning( coordinates(spdf) , ... )
u = c( 1 , 0 , -1 , -1 , 0 , 1 )
v = c( 1 , 2 , 1 , -1 , -2 , -1 )
u = u * min( diff( unique( sort( hbins$x))))
v = v * min( diff( unique( sort( hbins$y))))/3
hexes_list = vector( length(hbins$x) , mode="list" )
for ( i in 1:length(hbins$x) )
{
pol= Polygon( cbind( u + hbins$x[i] , v + hbins$y[i] ) ,
hole=FALSE )
hexes_list[[i]] = Polygons( list( pol) , i )
}
## Note error in book for next line (correcet on web site)
hex_cover_sp <- SpatialPolygons( hexes_list,
proj4string=CRS(proj4string(spdf)))
hex_cover = SpatialPolygonsDataFrame( hex_cover_sp ,
data.frame( z=hbins$z , match.ID=FALSE ) )
return( hex_cover )
}
tmap_mode( "view" )
breach_hex = hexbin_map( breach , bins=20 )
plot( breach_hex )
tm_shape( breach_hex ) +
tm_fill( col="z" , title="Count" , alpha=0.7 )
blocks
library( sp )
library( spatstat )
library( maptools )    ## contains  as.SpatialPoints.ppp
library( tmaptools )
library( MASS )
## library( kerdiest )
data( bramblecanes )
str( bramblecanes )
x = bramblecanes$x
y = bramblecanes$y
bramblecanes.kde = kde2d( x , y , 0.3 )
filled.contour( bramblecanes.kde , xlim=c(0,1) , ylim=c(0,1) , asp=1 )
class(bramblecanes.kde)
?filled.contour
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf, fMultivar)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
group0 = as(bramblecanes[bramblecanes$marks == "0"], "SpatialPoints")
proj4string(group0) <- CRS('+init=epsg:26978')
#not sure why error occur
group0_dens = smooth_map( group0)
tm_shape( group0_dens$raster ) +
tm_raster()
tm_shape( group0_dens$raster )
tm_shape( group0_dens$raster ) +
tm_raster()
trees = read.csv("homework/trees.csv")
trees_ppp = ppp(trees$x,trees$y,xrange=c(0,200),yrange=c(0,200))
trees_sp = as.SpatialPoints.ppp(trees_ppp)
proj4string(trees_sp) <- CRS('+init=epsg:26978')
#plot will not change no matter how contours change
contours = seq( 0 , 50000 , by=5000 )
sp_dens = smooth_map( sp ,breaks=contours , style="fixed", bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
trees = read.csv("homework/trees.csv")
trees_ppp = ppp(trees$x,trees$y,xrange=c(0,200),yrange=c(0,200))
trees_sp = as.SpatialPoints.ppp(trees_ppp)
proj4string(trees_sp) <- CRS('+init=epsg:26978')
#plot will not change no matter how contours change
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.02,0.015)) # you also need to adjust the bandwidth
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf, fMultivar)
data( bramblecanes )
bramblecanes$marks = as.character(bramblecanes$marks)
group0 = as(bramblecanes[bramblecanes$marks == "0"], "SpatialPoints")
proj4string(group0) <- CRS('+init=epsg:26978')
#not sure why error occur
group0_dens = smooth_map( group0)
tm_shape( group0_dens$raster ) +
tm_raster()
trees = read.csv("homework/trees.csv")
trees_ppp = ppp(trees$x,trees$y,xrange=c(0,200),yrange=c(0,200))
trees_sp = as.SpatialPoints.ppp(trees_ppp)
proj4string(trees_sp) <- CRS('+init=epsg:26978')
#plot will not change no matter how contours change
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.02,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 10000 ) ,
style="fixed",
bandwidth = c(0.02,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 10000 ) ,
style="fixed",
bandwidth = c(0.02,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
pacman::p_load(GISTools, tmap, tmaptools, spatstat, sf, fMultivar)
trees = read.csv("homework/trees.csv")
trees_ppp = ppp(trees$x,trees$y,xrange=c(0,200),yrange=c(0,200))
trees_sp = as.SpatialPoints.ppp(trees_ppp)
proj4string(trees_sp) <- CRS('+init=epsg:26978')
#plot will not change no matter how contours change
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 5000 ) ,
style="fixed",
bandwidth = c(0.01,0.01))
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 10000 ) ,
style="fixed",
bandwidth = c(0.02,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 10000 ) ,
style="fixed",
bandwidth = c(0.03,0.03)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
sp_dens = smooth_map( trees_sp ,
breaks= seq( 0 , 50000 , by = 10000 ) ,
style="fixed",
bandwidth = c(0.015,0.015)) # you also need to adjust the bandwidth
tm_shape( sp_dens$raster ) +
tm_raster()
d = data.table::fread("homework/SmokeyMountain.csv")
d
d = data.table::fread("homework/SmokeyMountain.csv")
pacman::p_load(sp, deldir)
# Modified Carson Farmer code
voronoipolygons = function(layer) {
crds <- layer@coords
z <- deldir(crds[,1], crds[,2])
w <- tile.list(z)
polys <- vector(mode='list', length=length(w))
for (i in seq(along=polys)) {
pcrds <- cbind(w[[i]]$x, w[[i]]$y)
pcrds <- rbind(pcrds, pcrds[1,])
polys[[i]] <- Polygons(list(Polygon(pcrds)),
ID=as.character(i))
}
SP <- SpatialPolygons(polys)
voronoi <- SpatialPolygonsDataFrame(SP,
data=data.frame(x=crds[,1],
y=crds[,2],
layer@data,
row.names=sapply(slot(SP, 'polygons'),
function(x) slot(x, 'ID'))))
proj4string(voronoi) <- CRS(proj4string(layer))
return(voronoi)
}
data(fulmar)
pacman::p_load(sp, deldir, gstat)
data(fulmar)
pacman::p_load(sp, deldir, gstat)
data(fulmar)
fulmar.spdf <- SpatialPointsDataFrame(cbind(fulmar$x,fulmar$y),
fulmar)
fulmar.spdf <- fulmar.spdf[fulmar.spdf$year==1999,]
proj4string(fulmar.spdf) <- CRS("+init=epsg:32631")
fulmar.voro <- voronoipolygons(fulmar.spdf)
tmap_mode('plot')
pacman::p_load(sp, deldir, gstat, tmap)
tmap_mode('plot')
fpt <- tm_shape(fulmar.spdf) + tm_dots(size=0.1)
fvr <- tm_shape(fulmar.voro) + tm_borders()
tmap_arrange(fpt,fvr)
cbind(fulmar$x,fulmar$y)
fulmar
sm_sp = SpatialPointsDataFrame(cbind(d$Easting,d$Northing),
d)
sm_sp = SpatialPointsDataFrame(cbind(d$Easting,d$Northing),
d)
proj4string(sm_sp) <- CRS("+init=epsg:32631")
sm_voro <- voronoipolygons(sm_sp)
tmap_mode('plot')
fpt <- tm_shape(sm_sp) + tm_dots(size=0.1)
fvr <- tm_shape(sm_voro) + tm_borders()
tmap_arrange(fpt, fvr)
sm_voro
d
sm_sp = SpatialPointsDataFrame(d[,.(x = Easting, y = Northing)],
d[,.(x = Easting, y = Northing, Ph)])
proj4string(sm_sp) <- CRS("+init=epsg:32631")
proj4string(sm_sp) = CRS("+init=epsg:32631")
sm_voro = voronoipolygons(sm_sp)
tmap_mode('plot')
fpt <- tm_shape(sm_sp) + tm_dots(size=0.1)
fvr <- tm_shape(sm_voro) + tm_borders()
tmap_arrange(fpt, fvr)
?idw
idw_est = gstat::idw(ph ~ 1, sm_sp, idp = 0.5)
sample_sm = sm_sp
idw_est = gstat::idw(ph ~ 1, data = sm_sp, newdata = sample_sm, idp = 0.5)
sm_sp
idw_est = gstat::idw(Ph ~ 1, data = sm_sp, newdata = sample_sm, idp = 0.5)
sample_sm = sm_sp
idw_est = gstat::idw(Ph ~ 1, data = sm_sp, newdata = sample_sm, idp = 0.5)
idw_est = idw(Ph ~ 1, data = sm_sp, newdata = sample_sm, idp = 0.5)
sample_sm = spsample(sm_voro, type = 'regular', n = 500)
idw_est = gstat::idw(Ph ~ 1, data = sm_sp, newdata = sample_sm, idp = 0.5)
fulmar.spdf
fulmar.spdf <- SpatialPointsDataFrame(cbind(fulmar$x,fulmar$y),
fulmar)
fulmar.spdf <- fulmar.spdf[fulmar.spdf$year==1999,]
proj4string(fulmar.spdf) <- CRS("+init=epsg:32631")
fulmar.voro <- voronoipolygons(fulmar.spdf)
fulmar.voro
fulmar.spdf
s.grid <- spsample(fulmar.voro,type='regular',n=6000)
idw.est <- gstat::idw(fulmar~1,fulmar.spdf,
newdata=s.grid,idp=1.0)
sm_sp
d
d[,quantile(Ph, probs = c(0, 0.25, 0.5, 0.75, 1))]
tm_shape(sm_sp) +
tm_fill(col = 'Ph', title = Ph) +
tm_borders() +
tm_dots(size=0.1)
tm_shape(sm_voro) +
tm_fill(col = 'Ph', title = Ph) +
tm_borders() +
tm_dots(size=0.1)
sm_voro
tm_shape(sm_voro) +
tm_fill(col = Ph, title = Ph) +
tm_borders() +
tm_dots(size=0.1)
tm_shape(sm_voro) +
tm_fill(col = 'Ph', title = 'Ph') +
tm_borders() +
tm_dots(size=0.1)
s.grid
sample_sm
fulmar.spdf
sm_sp
plot(sample_sm)
sample_sm = spsample(sm_voro, type = 'regular', n = 5000)
plot(sample_sm)
idw_est = gstat::idw(Ph ~ 1, data = sm_sp, newdata = sample_sm, idp = 0.5)
idw_est = gstat::idw(Ph ~ 1, sm_sp, newdata = sample_sm, idp = 0.5)
?gstat::idw
idw_est = gstat::idw(Ph ~ 1, locations = sm_sp, newdata = sample_sm, idp = 0.5)
idw_est
tmap_mode("view")
tm_shape(idw_est) +
tm_fill(col = 'var1.pred', title = 'Predicted Ph')
tmap_mode("view")
tm_shape(idw_est) +
tm_fill(col = 'var1.pred')
tm_shape(idw_est) +
tm_dots(col = 'var1.pred')
tm_shape(idw_est) +
tm_dots(col = 'var1.pred') +
tm_borders()
tm_shape(idw_est) +
tm_dots(col = 'var1.pred')
sample_sm = spsample(sm_voro, type = 'regular', n = 1000)
idw_est = gstat::idw(Ph ~ 1, locations = sm_sp, newdata = sample_sm, idp = 0.5)
tmap_mode("view")
tm_shape(idw_est) +
tm_dots(col = 'var1.pred')
sample_sm = spsample(sm_voro, type = 'regular', n = 2000)
idw_est = gstat::idw(Ph ~ 1, locations = sm_sp, newdata = sample_sm, idp = 0.5)
tmap_mode("view")
tm_shape(idw_est) +
tm_dots(col = 'var1.pred')
sample_sm = spsample(sm_voro, type = 'regular', n = 2000)
idw_est = gstat::idw(Ph ~ 1, locations = sm_sp, newdata = sample_sm, idp = 0.5)
#tmap_mode("view")
tm_shape(idw_est) +
tm_dots(col = 'var1.pred')
idw_est
sample_sm = spsample(sm_voro, type = 'regular', n = 2000)
idw_est = gstat::idw(Ph ~ 1, locations = sm_sp, newdata = sample_sm, idp = 0.5)
#tmap_mode("view")
tm_shape(idw_est) +
tm_dots(col = 'var1.pred')
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 25000, length = 50))
sm_fvgm = fit.variogram(sm_evgm, vgm('Mat))
sm_fvgm = fit.variogram(sm_evgm, vgm('Mat'))
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 250000, length = 50))
sm_fvgm = fit.variogram(sm_evgm, vgm('Mat'))
fulmar
hist(fulmar$fulmar)
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 250000, length = 51))
sm_fvgm = fit.variogram(sm_evgm, vgm('Mat'))
plot(sm_evgm)
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 250000, length = 1))
sm_fvgm = fit.variogram(sm_evgm, vgm('Mat'))
plot(sm_evgm)
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 250, length = 1))
plot(sm_evgm)
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 2500, length = 10))
plot(sm_evgm)
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 50, length = 1))
plot(sm_evgm)
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 500, length = 2))
plot(sm_evgm)
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 500, length = 5))
plot(sm_evgm)
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 5000, length = 5))
plot(sm_evgm)
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 50000, length = 5))
plot(sm_evgm)
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 50000, length = 50))
plot(sm_evgm)
d
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 5000000, length = 50))
plot(sm_evgm)
plot(sm_evgm)
sm_fvgm = fit.variogram(sm_evgm, vgm('Mat'))
plot(sm_evgm, model = sm_fvgm)
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 50000, length = 50))
sm_fvgm = fit.variogram(sm_evgm, vgm('Mat'))
sm_evgm = variogram(Ph ~ 1, sm_sp, boundaries = seq(0, 500000, length = 50))
sm_fvgm = fit.variogram(sm_evgm, vgm('Mat'))
